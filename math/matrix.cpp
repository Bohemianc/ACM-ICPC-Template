struct Mat {
    double a[3][3];
    Mat operator*(Mat b) {
        Mat ret;
        _for(i, 0, 3) {
            _for(j, 0, 3) {
                ret.a[i][j] = 0;
                _for(k, 0, 3) { ret.a[i][j] += a[i][k] * b.a[k][j]; }
            }
        }
        return ret;
    }
    Mat inverse() {
        double det = a[0][0] * a[1][1] * a[2][2] + a[0][1] * a[1][2] * a[2][0] + a[0][2] * a[1][0] * a[2][1] - a[0][2] * a[1][1] * a[2][0] -
                     a[0][1] * a[1][0] * a[2][2] - a[0][0] * a[1][2] * a[2][1];
        Mat ret;
        ret.a[0][0] = a[1][1] * a[2][2] - a[1][2] * a[2][1];
        ret.a[1][0] = (a[1][0] * a[2][2] - a[1][2] * a[2][0]) * (-1);
        ret.a[2][0] = a[1][0] * a[2][1] - a[1][1] * a[2][0];
        ret.a[0][1] = (a[0][1] * a[2][2] - a[0][2] * a[2][1]) * (-1);
        ret.a[0][2] = a[0][1] * a[1][2] - a[0][2] * a[1][1];
        ret.a[1][1] = a[0][0] * a[2][2] - a[0][2] * a[2][0];
        ret.a[2][1] = (a[0][0] * a[2][1] - a[0][1] * a[2][0]) * (-1);
        ret.a[1][2] = (a[0][0] * a[1][2] - a[0][2] * a[1][0]) * (-1);
        ret.a[2][2] = a[0][0] * a[1][1] - a[0][1] * a[1][0];
        _for(i, 0, 3) {
            _for(j, 0, 3) { ret.a[i][j] /= det; }
        }
        return ret;
    }
};